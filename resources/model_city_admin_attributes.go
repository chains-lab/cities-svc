/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"time"
	"bytes"
	"fmt"
)

// checks if the CityAdminAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CityAdminAttributes{}

// CityAdminAttributes struct for CityAdminAttributes
type CityAdminAttributes struct {
	// city id
	CityId uuid.UUID `json:"city_id"`
	// role of the user in this city
	Role string `json:"role"`
	// optional label for the user in this city
	Label *string `json:"label,omitempty"`
	// record creation date
	CreatedAt time.Time `json:"created_at"`
	// last update date
	UpdatedAt time.Time `json:"updated_at"`
}

type _CityAdminAttributes CityAdminAttributes

// NewCityAdminAttributes instantiates a new CityAdminAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCityAdminAttributes(cityId uuid.UUID, role string, createdAt time.Time, updatedAt time.Time) *CityAdminAttributes {
	this := CityAdminAttributes{}
	this.CityId = cityId
	this.Role = role
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewCityAdminAttributesWithDefaults instantiates a new CityAdminAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCityAdminAttributesWithDefaults() *CityAdminAttributes {
	this := CityAdminAttributes{}
	return &this
}

// GetCityId returns the CityId field value
func (o *CityAdminAttributes) GetCityId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.CityId
}

// GetCityIdOk returns a tuple with the CityId field value
// and a boolean to check if the value has been set.
func (o *CityAdminAttributes) GetCityIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityId, true
}

// SetCityId sets field value
func (o *CityAdminAttributes) SetCityId(v uuid.UUID) {
	o.CityId = v
}

// GetRole returns the Role field value
func (o *CityAdminAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *CityAdminAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *CityAdminAttributes) SetRole(v string) {
	o.Role = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CityAdminAttributes) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityAdminAttributes) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CityAdminAttributes) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CityAdminAttributes) SetLabel(v string) {
	o.Label = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CityAdminAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CityAdminAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CityAdminAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CityAdminAttributes) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CityAdminAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CityAdminAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o CityAdminAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CityAdminAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city_id"] = o.CityId
	toSerialize["role"] = o.Role
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *CityAdminAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city_id",
		"role",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCityAdminAttributes := _CityAdminAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCityAdminAttributes)

	if err != nil {
		return err
	}

	*o = CityAdminAttributes(varCityAdminAttributes)

	return err
}

type NullableCityAdminAttributes struct {
	value *CityAdminAttributes
	isSet bool
}

func (v NullableCityAdminAttributes) Get() *CityAdminAttributes {
	return v.value
}

func (v *NullableCityAdminAttributes) Set(val *CityAdminAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCityAdminAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCityAdminAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCityAdminAttributes(val *CityAdminAttributes) *NullableCityAdminAttributes {
	return &NullableCityAdminAttributes{value: val, isSet: true}
}

func (v NullableCityAdminAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCityAdminAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



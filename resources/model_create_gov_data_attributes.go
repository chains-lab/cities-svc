/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateGovDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGovDataAttributes{}

// CreateGovDataAttributes struct for CreateGovDataAttributes
type CreateGovDataAttributes struct {
	// city id
	CityId string `json:"city_id"`
	// user id
	UserId string `json:"user_id"`
	// role of the user in this city
	Role string `json:"role"`
	// label for the user in this city
	Label string `json:"label"`
}

type _CreateGovDataAttributes CreateGovDataAttributes

// NewCreateGovDataAttributes instantiates a new CreateGovDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGovDataAttributes(cityId string, userId string, role string, label string) *CreateGovDataAttributes {
	this := CreateGovDataAttributes{}
	this.CityId = cityId
	this.UserId = userId
	this.Role = role
	this.Label = label
	return &this
}

// NewCreateGovDataAttributesWithDefaults instantiates a new CreateGovDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGovDataAttributesWithDefaults() *CreateGovDataAttributes {
	this := CreateGovDataAttributes{}
	return &this
}

// GetCityId returns the CityId field value
func (o *CreateGovDataAttributes) GetCityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityId
}

// GetCityIdOk returns a tuple with the CityId field value
// and a boolean to check if the value has been set.
func (o *CreateGovDataAttributes) GetCityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityId, true
}

// SetCityId sets field value
func (o *CreateGovDataAttributes) SetCityId(v string) {
	o.CityId = v
}

// GetUserId returns the UserId field value
func (o *CreateGovDataAttributes) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreateGovDataAttributes) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreateGovDataAttributes) SetUserId(v string) {
	o.UserId = v
}

// GetRole returns the Role field value
func (o *CreateGovDataAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *CreateGovDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *CreateGovDataAttributes) SetRole(v string) {
	o.Role = v
}

// GetLabel returns the Label field value
func (o *CreateGovDataAttributes) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CreateGovDataAttributes) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CreateGovDataAttributes) SetLabel(v string) {
	o.Label = v
}

func (o CreateGovDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGovDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city_id"] = o.CityId
	toSerialize["user_id"] = o.UserId
	toSerialize["role"] = o.Role
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *CreateGovDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city_id",
		"user_id",
		"role",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGovDataAttributes := _CreateGovDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGovDataAttributes)

	if err != nil {
		return err
	}

	*o = CreateGovDataAttributes(varCreateGovDataAttributes)

	return err
}

type NullableCreateGovDataAttributes struct {
	value *CreateGovDataAttributes
	isSet bool
}

func (v NullableCreateGovDataAttributes) Get() *CreateGovDataAttributes {
	return v.value
}

func (v *NullableCreateGovDataAttributes) Set(val *CreateGovDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGovDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGovDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGovDataAttributes(val *CreateGovDataAttributes) *NullableCreateGovDataAttributes {
	return &NullableCreateGovDataAttributes{value: val, isSet: true}
}

func (v NullableCreateGovDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGovDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



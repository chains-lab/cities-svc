/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"bytes"
	"fmt"
)

// checks if the CreateInviteDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInviteDataAttributes{}

// CreateInviteDataAttributes struct for CreateInviteDataAttributes
type CreateInviteDataAttributes struct {
	// user id
	UserId uuid.UUID `json:"user_id"`
	// role of the user in this city
	Role string `json:"role"`
	// label for the user in this city
	Label string `json:"label"`
}

type _CreateInviteDataAttributes CreateInviteDataAttributes

// NewCreateInviteDataAttributes instantiates a new CreateInviteDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInviteDataAttributes(userId uuid.UUID, role string, label string) *CreateInviteDataAttributes {
	this := CreateInviteDataAttributes{}
	this.UserId = userId
	this.Role = role
	this.Label = label
	return &this
}

// NewCreateInviteDataAttributesWithDefaults instantiates a new CreateInviteDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInviteDataAttributesWithDefaults() *CreateInviteDataAttributes {
	this := CreateInviteDataAttributes{}
	return &this
}

// GetUserId returns the UserId field value
func (o *CreateInviteDataAttributes) GetUserId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreateInviteDataAttributes) GetUserIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreateInviteDataAttributes) SetUserId(v uuid.UUID) {
	o.UserId = v
}

// GetRole returns the Role field value
func (o *CreateInviteDataAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *CreateInviteDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *CreateInviteDataAttributes) SetRole(v string) {
	o.Role = v
}

// GetLabel returns the Label field value
func (o *CreateInviteDataAttributes) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CreateInviteDataAttributes) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CreateInviteDataAttributes) SetLabel(v string) {
	o.Label = v
}

func (o CreateInviteDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInviteDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["role"] = o.Role
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *CreateInviteDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"role",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateInviteDataAttributes := _CreateInviteDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateInviteDataAttributes)

	if err != nil {
		return err
	}

	*o = CreateInviteDataAttributes(varCreateInviteDataAttributes)

	return err
}

type NullableCreateInviteDataAttributes struct {
	value *CreateInviteDataAttributes
	isSet bool
}

func (v NullableCreateInviteDataAttributes) Get() *CreateInviteDataAttributes {
	return v.value
}

func (v *NullableCreateInviteDataAttributes) Set(val *CreateInviteDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInviteDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInviteDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInviteDataAttributes(val *CreateInviteDataAttributes) *NullableCreateInviteDataAttributes {
	return &NullableCreateInviteDataAttributes{value: val, isSet: true}
}

func (v NullableCreateInviteDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInviteDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



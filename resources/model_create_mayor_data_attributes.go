/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateMayorDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMayorDataAttributes{}

// CreateMayorDataAttributes struct for CreateMayorDataAttributes
type CreateMayorDataAttributes struct {
	// city id
	CityId string `json:"city_id"`
	// user id
	UserId string `json:"user_id"`
	// label for the user in this city
	Label string `json:"label"`
}

type _CreateMayorDataAttributes CreateMayorDataAttributes

// NewCreateMayorDataAttributes instantiates a new CreateMayorDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMayorDataAttributes(cityId string, userId string, label string) *CreateMayorDataAttributes {
	this := CreateMayorDataAttributes{}
	this.CityId = cityId
	this.UserId = userId
	this.Label = label
	return &this
}

// NewCreateMayorDataAttributesWithDefaults instantiates a new CreateMayorDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMayorDataAttributesWithDefaults() *CreateMayorDataAttributes {
	this := CreateMayorDataAttributes{}
	return &this
}

// GetCityId returns the CityId field value
func (o *CreateMayorDataAttributes) GetCityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityId
}

// GetCityIdOk returns a tuple with the CityId field value
// and a boolean to check if the value has been set.
func (o *CreateMayorDataAttributes) GetCityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityId, true
}

// SetCityId sets field value
func (o *CreateMayorDataAttributes) SetCityId(v string) {
	o.CityId = v
}

// GetUserId returns the UserId field value
func (o *CreateMayorDataAttributes) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreateMayorDataAttributes) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreateMayorDataAttributes) SetUserId(v string) {
	o.UserId = v
}

// GetLabel returns the Label field value
func (o *CreateMayorDataAttributes) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CreateMayorDataAttributes) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CreateMayorDataAttributes) SetLabel(v string) {
	o.Label = v
}

func (o CreateMayorDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMayorDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city_id"] = o.CityId
	toSerialize["user_id"] = o.UserId
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *CreateMayorDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city_id",
		"user_id",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateMayorDataAttributes := _CreateMayorDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateMayorDataAttributes)

	if err != nil {
		return err
	}

	*o = CreateMayorDataAttributes(varCreateMayorDataAttributes)

	return err
}

type NullableCreateMayorDataAttributes struct {
	value *CreateMayorDataAttributes
	isSet bool
}

func (v NullableCreateMayorDataAttributes) Get() *CreateMayorDataAttributes {
	return v.value
}

func (v *NullableCreateMayorDataAttributes) Set(val *CreateMayorDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMayorDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMayorDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMayorDataAttributes(val *CreateMayorDataAttributes) *NullableCreateMayorDataAttributes {
	return &NullableCreateMayorDataAttributes{value: val, isSet: true}
}

func (v NullableCreateMayorDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMayorDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



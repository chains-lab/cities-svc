/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"bytes"
	"fmt"
)

// checks if the CreateCityDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCityDataAttributes{}

// CreateCityDataAttributes struct for CreateCityDataAttributes
type CreateCityDataAttributes struct {
	// country id
	CountryId uuid.UUID `json:"country_id"`
	// city name
	Name string `json:"name"`
	Point Point `json:"point"`
	// city timezone
	Timezone string `json:"timezone"`
}

type _CreateCityDataAttributes CreateCityDataAttributes

// NewCreateCityDataAttributes instantiates a new CreateCityDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCityDataAttributes(countryId uuid.UUID, name string, point Point, timezone string) *CreateCityDataAttributes {
	this := CreateCityDataAttributes{}
	this.CountryId = countryId
	this.Name = name
	this.Point = point
	this.Timezone = timezone
	return &this
}

// NewCreateCityDataAttributesWithDefaults instantiates a new CreateCityDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCityDataAttributesWithDefaults() *CreateCityDataAttributes {
	this := CreateCityDataAttributes{}
	return &this
}

// GetCountryId returns the CountryId field value
func (o *CreateCityDataAttributes) GetCountryId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value
// and a boolean to check if the value has been set.
func (o *CreateCityDataAttributes) GetCountryIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryId, true
}

// SetCountryId sets field value
func (o *CreateCityDataAttributes) SetCountryId(v uuid.UUID) {
	o.CountryId = v
}

// GetName returns the Name field value
func (o *CreateCityDataAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateCityDataAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateCityDataAttributes) SetName(v string) {
	o.Name = v
}

// GetPoint returns the Point field value
func (o *CreateCityDataAttributes) GetPoint() Point {
	if o == nil {
		var ret Point
		return ret
	}

	return o.Point
}

// GetPointOk returns a tuple with the Point field value
// and a boolean to check if the value has been set.
func (o *CreateCityDataAttributes) GetPointOk() (*Point, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Point, true
}

// SetPoint sets field value
func (o *CreateCityDataAttributes) SetPoint(v Point) {
	o.Point = v
}

// GetTimezone returns the Timezone field value
func (o *CreateCityDataAttributes) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *CreateCityDataAttributes) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *CreateCityDataAttributes) SetTimezone(v string) {
	o.Timezone = v
}

func (o CreateCityDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCityDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country_id"] = o.CountryId
	toSerialize["name"] = o.Name
	toSerialize["point"] = o.Point
	toSerialize["timezone"] = o.Timezone
	return toSerialize, nil
}

func (o *CreateCityDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country_id",
		"name",
		"point",
		"timezone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCityDataAttributes := _CreateCityDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCityDataAttributes)

	if err != nil {
		return err
	}

	*o = CreateCityDataAttributes(varCreateCityDataAttributes)

	return err
}

type NullableCreateCityDataAttributes struct {
	value *CreateCityDataAttributes
	isSet bool
}

func (v NullableCreateCityDataAttributes) Get() *CreateCityDataAttributes {
	return v.value
}

func (v *NullableCreateCityDataAttributes) Set(val *CreateCityDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCityDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCityDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCityDataAttributes(val *CreateCityDataAttributes) *NullableCreateCityDataAttributes {
	return &NullableCreateCityDataAttributes{value: val, isSet: true}
}

func (v NullableCreateCityDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCityDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the InviteDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteDataAttributes{}

// InviteDataAttributes struct for InviteDataAttributes
type InviteDataAttributes struct {
	// status of the invite
	Status string `json:"status"`
	// role of the user in this city
	Role string `json:"role"`
	// city id
	CityId string `json:"city_id"`
	// user id of the person who sent the invite
	InitiatorId string `json:"initiator_id"`
	// user id of the person who received the invite
	UserId *string `json:"user_id,omitempty"`
	// timestamp when the invite was answered
	AnsweredAt *time.Time `json:"answered_at,omitempty"`
	// timestamp when the invite will expire
	ExpiresAt time.Time `json:"expires_at"`
	// timestamp when the invite was created
	CreatedAt time.Time `json:"created_at"`
}

type _InviteDataAttributes InviteDataAttributes

// NewInviteDataAttributes instantiates a new InviteDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteDataAttributes(status string, role string, cityId string, initiatorId string, expiresAt time.Time, createdAt time.Time) *InviteDataAttributes {
	this := InviteDataAttributes{}
	this.Status = status
	this.Role = role
	this.CityId = cityId
	this.InitiatorId = initiatorId
	this.ExpiresAt = expiresAt
	this.CreatedAt = createdAt
	return &this
}

// NewInviteDataAttributesWithDefaults instantiates a new InviteDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteDataAttributesWithDefaults() *InviteDataAttributes {
	this := InviteDataAttributes{}
	return &this
}

// GetStatus returns the Status field value
func (o *InviteDataAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InviteDataAttributes) SetStatus(v string) {
	o.Status = v
}

// GetRole returns the Role field value
func (o *InviteDataAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *InviteDataAttributes) SetRole(v string) {
	o.Role = v
}

// GetCityId returns the CityId field value
func (o *InviteDataAttributes) GetCityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityId
}

// GetCityIdOk returns a tuple with the CityId field value
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetCityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityId, true
}

// SetCityId sets field value
func (o *InviteDataAttributes) SetCityId(v string) {
	o.CityId = v
}

// GetInitiatorId returns the InitiatorId field value
func (o *InviteDataAttributes) GetInitiatorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitiatorId
}

// GetInitiatorIdOk returns a tuple with the InitiatorId field value
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetInitiatorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitiatorId, true
}

// SetInitiatorId sets field value
func (o *InviteDataAttributes) SetInitiatorId(v string) {
	o.InitiatorId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *InviteDataAttributes) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *InviteDataAttributes) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *InviteDataAttributes) SetUserId(v string) {
	o.UserId = &v
}

// GetAnsweredAt returns the AnsweredAt field value if set, zero value otherwise.
func (o *InviteDataAttributes) GetAnsweredAt() time.Time {
	if o == nil || IsNil(o.AnsweredAt) {
		var ret time.Time
		return ret
	}
	return *o.AnsweredAt
}

// GetAnsweredAtOk returns a tuple with the AnsweredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetAnsweredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AnsweredAt) {
		return nil, false
	}
	return o.AnsweredAt, true
}

// HasAnsweredAt returns a boolean if a field has been set.
func (o *InviteDataAttributes) HasAnsweredAt() bool {
	if o != nil && !IsNil(o.AnsweredAt) {
		return true
	}

	return false
}

// SetAnsweredAt gets a reference to the given time.Time and assigns it to the AnsweredAt field.
func (o *InviteDataAttributes) SetAnsweredAt(v time.Time) {
	o.AnsweredAt = &v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *InviteDataAttributes) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *InviteDataAttributes) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *InviteDataAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *InviteDataAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *InviteDataAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o InviteDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["role"] = o.Role
	toSerialize["city_id"] = o.CityId
	toSerialize["initiator_id"] = o.InitiatorId
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.AnsweredAt) {
		toSerialize["answered_at"] = o.AnsweredAt
	}
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *InviteDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"role",
		"city_id",
		"initiator_id",
		"expires_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteDataAttributes := _InviteDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInviteDataAttributes)

	if err != nil {
		return err
	}

	*o = InviteDataAttributes(varInviteDataAttributes)

	return err
}

type NullableInviteDataAttributes struct {
	value *InviteDataAttributes
	isSet bool
}

func (v NullableInviteDataAttributes) Get() *InviteDataAttributes {
	return v.value
}

func (v *NullableInviteDataAttributes) Set(val *InviteDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteDataAttributes(val *InviteDataAttributes) *NullableInviteDataAttributes {
	return &NullableInviteDataAttributes{value: val, isSet: true}
}

func (v NullableInviteDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



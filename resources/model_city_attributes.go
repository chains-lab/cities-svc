/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"time"
	"bytes"
	"fmt"
)

// checks if the CityAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CityAttributes{}

// CityAttributes struct for CityAttributes
type CityAttributes struct {
	// country id
	CountryId uuid.UUID `json:"country_id"`
	Point Point `json:"point"`
	// city status
	Status string `json:"status"`
	// city name
	Name string `json:"name"`
	// city icon uri
	Icon *string `json:"icon,omitempty"`
	// city slug
	Slug *string `json:"slug,omitempty"`
	// city timezone
	Timezone string `json:"timezone"`
	// creation date
	CreatedAt time.Time `json:"created_at"`
	// last update date
	UpdatedAt time.Time `json:"updated_at"`
}

type _CityAttributes CityAttributes

// NewCityAttributes instantiates a new CityAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCityAttributes(countryId uuid.UUID, point Point, status string, name string, timezone string, createdAt time.Time, updatedAt time.Time) *CityAttributes {
	this := CityAttributes{}
	this.CountryId = countryId
	this.Point = point
	this.Status = status
	this.Name = name
	this.Timezone = timezone
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewCityAttributesWithDefaults instantiates a new CityAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCityAttributesWithDefaults() *CityAttributes {
	this := CityAttributes{}
	return &this
}

// GetCountryId returns the CountryId field value
func (o *CityAttributes) GetCountryId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetCountryIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryId, true
}

// SetCountryId sets field value
func (o *CityAttributes) SetCountryId(v uuid.UUID) {
	o.CountryId = v
}

// GetPoint returns the Point field value
func (o *CityAttributes) GetPoint() Point {
	if o == nil {
		var ret Point
		return ret
	}

	return o.Point
}

// GetPointOk returns a tuple with the Point field value
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetPointOk() (*Point, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Point, true
}

// SetPoint sets field value
func (o *CityAttributes) SetPoint(v Point) {
	o.Point = v
}

// GetStatus returns the Status field value
func (o *CityAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CityAttributes) SetStatus(v string) {
	o.Status = v
}

// GetName returns the Name field value
func (o *CityAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CityAttributes) SetName(v string) {
	o.Name = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *CityAttributes) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *CityAttributes) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *CityAttributes) SetIcon(v string) {
	o.Icon = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *CityAttributes) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *CityAttributes) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *CityAttributes) SetSlug(v string) {
	o.Slug = &v
}

// GetTimezone returns the Timezone field value
func (o *CityAttributes) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *CityAttributes) SetTimezone(v string) {
	o.Timezone = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CityAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CityAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CityAttributes) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CityAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CityAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o CityAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CityAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country_id"] = o.CountryId
	toSerialize["point"] = o.Point
	toSerialize["status"] = o.Status
	toSerialize["name"] = o.Name
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	toSerialize["timezone"] = o.Timezone
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *CityAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country_id",
		"point",
		"status",
		"name",
		"timezone",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCityAttributes := _CityAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCityAttributes)

	if err != nil {
		return err
	}

	*o = CityAttributes(varCityAttributes)

	return err
}

type NullableCityAttributes struct {
	value *CityAttributes
	isSet bool
}

func (v NullableCityAttributes) Get() *CityAttributes {
	return v.value
}

func (v *NullableCityAttributes) Set(val *CityAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCityAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCityAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCityAttributes(val *CityAttributes) *NullableCityAttributes {
	return &NullableCityAttributes{value: val, isSet: true}
}

func (v NullableCityAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCityAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



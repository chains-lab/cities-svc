/*
cities-svc API

API documentation for cities-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GovAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GovAttributes{}

// GovAttributes struct for GovAttributes
type GovAttributes struct {
	// user id
	UserId string `json:"user_id"`
	// city id
	CityId string `json:"city_id"`
	// status of the user in this city
	Status string `json:"status"`
	// role of the user in this city
	Role string `json:"role"`
	// optional label for the user in this city
	Label string `json:"label"`
	// record deactivation date
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// record creation date
	CreatedAt time.Time `json:"created_at"`
	// last update date
	UpdatedAt time.Time `json:"updated_at"`
}

type _GovAttributes GovAttributes

// NewGovAttributes instantiates a new GovAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGovAttributes(userId string, cityId string, status string, role string, label string, createdAt time.Time, updatedAt time.Time) *GovAttributes {
	this := GovAttributes{}
	this.UserId = userId
	this.CityId = cityId
	this.Status = status
	this.Role = role
	this.Label = label
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewGovAttributesWithDefaults instantiates a new GovAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGovAttributesWithDefaults() *GovAttributes {
	this := GovAttributes{}
	return &this
}

// GetUserId returns the UserId field value
func (o *GovAttributes) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *GovAttributes) SetUserId(v string) {
	o.UserId = v
}

// GetCityId returns the CityId field value
func (o *GovAttributes) GetCityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityId
}

// GetCityIdOk returns a tuple with the CityId field value
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetCityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityId, true
}

// SetCityId sets field value
func (o *GovAttributes) SetCityId(v string) {
	o.CityId = v
}

// GetStatus returns the Status field value
func (o *GovAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GovAttributes) SetStatus(v string) {
	o.Status = v
}

// GetRole returns the Role field value
func (o *GovAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *GovAttributes) SetRole(v string) {
	o.Role = v
}

// GetLabel returns the Label field value
func (o *GovAttributes) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *GovAttributes) SetLabel(v string) {
	o.Label = v
}

// GetDeactivatedAt returns the DeactivatedAt field value if set, zero value otherwise.
func (o *GovAttributes) GetDeactivatedAt() time.Time {
	if o == nil || IsNil(o.DeactivatedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeactivatedAt
}

// GetDeactivatedAtOk returns a tuple with the DeactivatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetDeactivatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeactivatedAt) {
		return nil, false
	}
	return o.DeactivatedAt, true
}

// HasDeactivatedAt returns a boolean if a field has been set.
func (o *GovAttributes) HasDeactivatedAt() bool {
	if o != nil && !IsNil(o.DeactivatedAt) {
		return true
	}

	return false
}

// SetDeactivatedAt gets a reference to the given time.Time and assigns it to the DeactivatedAt field.
func (o *GovAttributes) SetDeactivatedAt(v time.Time) {
	o.DeactivatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *GovAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GovAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *GovAttributes) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *GovAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *GovAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o GovAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GovAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["city_id"] = o.CityId
	toSerialize["status"] = o.Status
	toSerialize["role"] = o.Role
	toSerialize["label"] = o.Label
	if !IsNil(o.DeactivatedAt) {
		toSerialize["deactivated_at"] = o.DeactivatedAt
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *GovAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"city_id",
		"status",
		"role",
		"label",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGovAttributes := _GovAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGovAttributes)

	if err != nil {
		return err
	}

	*o = GovAttributes(varGovAttributes)

	return err
}

type NullableGovAttributes struct {
	value *GovAttributes
	isSet bool
}

func (v NullableGovAttributes) Get() *GovAttributes {
	return v.value
}

func (v *NullableGovAttributes) Set(val *GovAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableGovAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableGovAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGovAttributes(val *GovAttributes) *NullableGovAttributes {
	return &NullableGovAttributes{value: val, isSet: true}
}

func (v NullableGovAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGovAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


